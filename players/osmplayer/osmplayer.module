<?php
// Open Standard Media Player:  Provides the osmplayer functionality to the MediaFront module.
require_once( drupal_get_path('module', 'osmplayer') . '/player/OSMPlayer.php' );

/**
 * Implementation of hook_get_player()
 */
function osmplayer_get_player( $params ) {
   $template = (isset($params['template']) && $params['template']) ? $params['template'] : "default";

   // If they provide the playlist object, encode it as JSON.
   if( isset($params['playlistObj']) && $params['playlistObj'] ) {
     $params['playlist'] = mediafront_json_encode( $params['playlistObj'] );
   }
   
   // If they provide the node object, encode it as JSON.   
   if( isset($params['nodeObj']) && $params['nodeObj'] ) {
      $params['node'] = mediafront_json_encode( $params['nodeObj'] );
   }
   
   return theme( 'osmplayer_' . $template, $params );
}

/**
 * Implementation of hook_player_info()
 */
function osmplayer_player_info()
{
   $info = array();
   $info['osmplayer'] = array(
     'title' => 'Open Standard Media Player',
     'description' => 'An Open Source - Open Standard, full featured media player.'
   );
   return $info;  
}

/**
 * Implementation of hook_theme()
 */
function osmplayer_theme() {
  $templates = osmplayer_get_templates();
  $themes = array();

  $path = drupal_get_path('module', 'osmplayer') . '/';
  $path .= 'player/templates';  
  
  foreach( $templates as $template ) {
     $themes['osmplayer_' . $template] = array(
        'template'  => 'osmplayer_' . $template,
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template),
        'preprocess functions' => array('template_preprocess_osmplayer')     
     );   
     $themes['osmplayer_' . $template . '_titlebar'] = array(
        'template'  => 'osmplayer_' . $template . '_titlebar',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)    
     );   
     $themes['osmplayer_' . $template . '_menu'] = array(
        'template'  => 'osmplayer_' . $template . '_menu',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)    
     );
     $themes['osmplayer_' . $template . '_controlbar'] = array(
        'template'  => 'osmplayer_' . $template . '_controlbar',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template),
        'preprocess functions' => array('template_preprocess_osmplayer_controlbar')      
     );               
     $themes['osmplayer_' . $template . '_node'] = array(
        'template'  => 'osmplayer_' . $template . '_node',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template),
        'preprocess functions' => array('template_preprocess_osmplayer_node')     
     ); 
     $themes['osmplayer_' . $template . '_nodevoter'] = array(
        'template'  => 'osmplayer_' . $template . '_nodevoter',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)     
     );       
     $themes['osmplayer_' . $template . '_teaser'] = array(
        'template'  => 'osmplayer_' . $template . '_teaser',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template),
        'preprocess functions' => array('template_preprocess_osmplayer_teaser')     
     );
     $themes['osmplayer_' . $template . '_teaservoter'] = array(
        'template'  => 'osmplayer_' . $template . '_teaservoter',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)    
     );              
     $themes['osmplayer_' . $template . '_playlist'] = array(
        'template'  => 'osmplayer_' . $template . '_playlist',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template),
        'preprocess functions' => array('template_preprocess_osmplayer_playlist')     
     ); 
     $themes['osmplayer_' . $template . '_scrollbar'] = array(
        'template'  => 'osmplayer_' . $template . '_scrollbar',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)     
     ); 
     $themes['osmplayer_' . $template . '_hscrollbar'] = array(
        'template'  => 'osmplayer_' . $template . '_hscrollbar',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)     
     );             
     $themes['osmplayer_' . $template . '_links'] = array(
        'template'  => 'osmplayer_' . $template . '_links',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)    
     );       
     $themes['osmplayer_' . $template . '_pager'] = array(
        'template'  => 'osmplayer_' . $template . '_pager',
        'arguments' => array('params' => NULL),
        'path' => ($path . '/' . $template)    
     );     
  }
  return $themes;
}

/**
 * Clears the osmplayer CSS directory.
 */
function osmplayer_clear_css() {
   $css_dir = osmplayer_get_css_dir();
   if(is_dir($css_dir)) {
      if($contents = opendir($css_dir)) {
         while(($node = readdir($contents)) !== false) {
            if($node!="." && $node!="..") {
               $node = $css_dir.DIRECTORY_SEPARATOR.$node;
               if( is_file( $node ) ) {
                  unlink( $node );
               }
            }
         }
      }
   } 	
}

/**
 * Gets the CSS directory.
 * @return String - The css folder.
 */
function osmplayer_get_css_dir() {
   // Now make sure that the osmplayer CSS directory exists.
   $css_dir = getcwd() . DIRECTORY_SEPARATOR . file_directory_path() . DIRECTORY_SEPARATOR . 'css';
   if( !is_dir($css_dir) ) { 
      mkdir($css_dir, 0775);
   }     
   $css_dir .= DIRECTORY_SEPARATOR . 'osmplayer';
   if( !is_dir($css_dir) ) { 
      mkdir($css_dir, 0775);
   } 

   // Return the CSS directory.
   return $css_dir;
}

/**
 * Implementation of hook_mediafront_preset_save
 */
function osmplayer_mediafront_preset_save( $params ) {  
   // Now create the preset CSS files.   This keeps different presets from stomping on 
   // each other when multiple presets are on the same page.  It also makes this module play nice
   // with the jQuery-UI module.   
   $settings = isset( $params->settings ) ? $params->settings : null;
   
   // Create the OSMPlayer object with these settings.
   $player = new OSMPlayer( $settings );
   
   // Set the ID for this player based on the preset name.
   $player->setId( 'mediafront_' . $params->name );
   
   // Set the CSS directory of our OSMPlayer component.
   $player->setCSSDirectory( osmplayer_get_css_dir() );
   
   // Now delete the previous CSS files, and then create the new ones.
   $player->deleteCSS();
   $player->createCSS();
}

/**
 * Implementation of hook_get_player_settings
 * 
 * These are the settings that the module implements...
 */
function osmplayer_get_player_settings() {
   $player = new OSMPlayer();
   return $player->getPlayerSettings();
}

/**
 *  Implementation of hook_get_player_params.
 *  
 *  These are the parameters that the player requires...
 */
function osmplayer_get_player_params() {
   $playerpath = drupal_get_path('module', 'osmplayer') . '/player';   
   $hasServices = module_exists('services') && module_exists('xmlrpc_server');
   $player = new OSMPlayer();
   $params = $player->getPlayerParams();     
   $params['protocol'] = $hasServices ? "auto" : "json";
   return $params;
}

/**
 * Implementation of hook_player_settings_form
 */
function osmplayer_player_settings_form( $preset ) {
   $playerpath = drupal_get_path('module', 'osmplayer') . '/player';
   $form['presentation'] = array(
      '#type' => 'fieldset',
      '#title' => t('Presentation Settings'),
      '#weight' => -10,
      '#collapsible' => true,
      '#collapsed' => true 
   );
   $form['presentation']['theme'] = array(
      '#type' => 'select',
      '#title' => t('Theme'),
      '#description' => t('Select the theme you would like to use for this player.  The theme provides the look and feel for the media player.  Select <strong>&lt;none&gt;</strong> if you would not like to use a theme.<br/>You can download new themes for the OSM Player using the jQuery UI <a target="_blank" href="http://jqueryui.com/themeroller">JQuery UI ThemeRoller</a> interface.  Once you have downloaded a new theme, simply place the contents of that download in the <strong>modules/mediafront/players/osmplayer/player/jquery-ui</strong> folder.  Once you refresh the browser, you should see your new theme show up in this list.<br/><br/><strong>IMPORTANT NOTE:  You cannot have more than one theme present on a page at any given time.  This will cause the themes to override one other causing issues.</strong>'),
      '#options' => array_merge(array('none'=>t('<none>')), osmplayer_get_themes()),
      '#default_value' => $preset->settings['theme']
   );
   $form['presentation']['template'] = array(
      '#type' => 'select',
      '#title' => t('Template'),
      '#description' => t('Select the template you would like to use for this player.  The template provides specific functionality as well as the layout for the media player.  Each template can be found in the <strong>modules/mediafront/players/osmplayer/player/templates</strong> folder.'),
      '#options' => osmplayer_get_templates(),
      '#default_value' => $preset->settings['template']  
   ); 
   $form['presentation']['skin'] = array(
      '#type' => 'select',
      '#title' => t('Flash Player Skin'),
      '#description' => t('Select the Flash Player Skin you would like to use for this player.  The Open Standard Media Player employs a light weight Flash Player to show Flash media within the center black media region.  When this player goes into browser full screen, it will then show the Flash Player Skin for the ControlBar and the Play overlay.  This can be modified by creating custom skins within the <strong>modules/mediafront/players/osmplayer/player/flash/skins</strong> folder.  These skins are provided in this list below for selection.'),
      '#options' => osmplayer_get_skins(),
      '#default_value' => $preset->settings['skin']  
   ); 
   $form['presentation']['width'] = array(
     '#type' => 'textfield',
     '#title' => t('Player Width'),
     '#description' => t('Enter the width of the player.'),
     '#default_value' => $preset->settings['width']
   );    
   $form['presentation']['height'] = array(
     '#type' => 'textfield',
     '#title' => t('Player Height'),
     '#description' => t('Enter the height of the player.'),
     '#default_value' => $preset->settings['height']
   );   
   $form['presentation']['showTitleBar'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show Title Bar'),
     '#description' => t('Specify if you would like to see the title bar of this player'),
     '#default_value' => $preset->settings['showTitleBar']
   );
   $form['presentation']['wmode'] = array(
      '#title' => t('Flash Window Mode'),
      '#type' => 'select',
      '#options' => array('none' => 'none', 'transparent' => 'transparent', 'window' => 'window'),
      '#default_value' => $preset->settings['wmode'],
      '#description' => t('Selects which window mode you would like for the OSM Flash player to operate under (denoted by the <b>wmode</b> parameter in the object code)
         <ul>
            <li><b>none</b> - <em>No window mode</em></li>
            <li><b>wmode=transparent</b> - <em>Allows for other elements to drop in front of the video (like a drop-down list), without the video showing over those elements.</em></li>
            <li><b>wmode=window</b> - <em>Allows for the video to have full-screen support.</em></li>
         </ul>')
   );      
   
   $form['media_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Media Settings'),
      '#weight' => -9,   
      '#collapsible' => true,
      '#collapsed' => true 
   ); 
   $form['media_settings']['volume'] = array(
     '#type' => 'textfield',
     '#title' => t('Default Volume'),
     '#description' => t('Enter the initial volume for the player.'),
     '#default_value' => $preset->settings['volume']
   ); 
   $form['media_settings']['autostart'] = array(
     '#type' => 'checkbox',
     '#title' => t('Auto Start'),
     '#description' => t('If checked, the media will automatically load and play once the page loads.'),
     '#default_value' => $preset->settings['autostart']
   );
   $form['media_settings']['autoLoad'] = array(
     '#type' => 'checkbox',
     '#title' => t('Auto Load'),
     '#description' => t('If checked, the media will automatically start loading once the page loads.'),
     '#default_value' => $preset->settings['autoLoad']
   );            
   $form['media_settings']['streamer'] = array(
     '#type' => 'textfield',
     '#title' => t('Media Stream'),
     '#description' => t('Enter the media stream location.'),
     '#default_value' => $preset->settings['streamer']
   );    

   /************************* PLAYLIST SETTINGS *************************************/
   $form['playlist_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Playlist Settings'),
      '#weight' => -8,    
      '#collapsible' => true,
      '#collapsed' => true 
   );     
   $form['playlist_settings']['playlist'] = array(
     '#type' => 'textfield',
     '#title' => t('Default Playlist'),
     '#description' => t('Enter the name or the URL of the playlist you would like to load by default.  This can either be an external XML file, or the name of the view that represents your playlist.  This, however, will be overridden if you explicitly provide the playlist when adding this preset to a page.'),
     '#default_value' => $preset->settings['playlist']
   ); 
   $form['playlist_settings']['autoNext'] = array(
     '#type' => 'checkbox',
     '#title' => t('Auto Next'),
     '#description' => t('Specify if you would the player to automatically move to the next node after the previous one finishes playing.'),
     '#default_value' => $preset->settings['autoNext']
   );   
   $form['playlist_settings']['pageLink'] = array(
     '#type' => 'checkbox',
     '#title' => t('Page Link'),
     '#description' => t('Specify if you would like each teaser to be a link to the actual page where the content is loaded.'),
     '#default_value' => $preset->settings['pageLink']
   );     
   $form['playlist_settings']['shuffle'] = array(
     '#type' => 'checkbox',
     '#title' => t('Shuffle'),
     '#description' => t('If checked, the playlist will play in a random order.'),
     '#default_value' => $preset->settings['shuffle']
   );      
   $form['playlist_settings']['loop'] = array(
     '#type' => 'checkbox',
     '#title' => t('Loop'),
     '#description' => t('If checked, the media playlist will play over once it has been completed.  This also applies if there is only a single media being played.'),
     '#default_value' => $preset->settings['loop']
   );     
   $form['playlist_settings']['scrollSettings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Scroll Settings'),
      '#collapsible' => true,
      '#collapsed' => true    
   );   
   $form['playlist_settings']['scrollSettings']['showScrollbar'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show Scroll Bar'),
     '#description' => t('Check to show the scroll bar or not.'),
     '#default_value' => $preset->settings['showScrollbar']
   );    
   $form['playlist_settings']['scrollSettings']['scrollMode'] = array(
     '#type' => 'select',
     '#title' => t('Scroll Mode'),
     '#options' => array('auto'=>'Auto Scroll', 'hover'=>'Hover Scroll', 'span'=>'Span Scroll', 'none'=>'No Scroll'),
     '#description' => t('Specify how you would like the playlist to scroll.  Auto Scroll will make the playlist scroll follow the mouse movements.  Hover Scroll will only scroll once the user hover\'s over a certain button region in the scroll region.  Span Scroll will scroll the playlist using the exact mouse position.  No Scroll will disable playlist scrolling.'),
     '#default_value' => $preset->settings['scrollMode']
   );    
   $form['playlist_settings']['scrollSettings']['scrollSpeed'] = array(
     '#type' => 'textfield',
     '#title' => t('Scroll Speed'),
     '#description' => t('The speed which the playlist scrolls.'),
     '#default_value' => $preset->settings['scrollSpeed']
   );          
   $form['playlist_settings']['displaySettings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Display Settings'),
      '#collapsible' => true,
      '#collapsed' => true    
   );
   $form['playlist_settings']['displaySettings']['disablePlaylist'] = array(
     '#type' => 'checkbox',
     '#title' => t('Disable Playlist'),
     '#description' => t('Will completely remove the playlist funcitonality.'),
     '#default_value' => $preset->settings['disablePlaylist']
   );    
   $form['playlist_settings']['displaySettings']['showPlaylist'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show Playlist'),
     '#description' => t('Select if you would like to see the playlist by default. ( They can then see the playlist my pressing the maximize button )'),
     '#default_value' => $preset->settings['showPlaylist']
   ); 
   $form['playlist_settings']['displaySettings']['playlistOnly'] = array(
     '#type' => 'checkbox',
     '#title' => t('Playlist Only'),
     '#description' => t('Select if you would like to ONLY see the playlist.'),
     '#default_value' => $preset->settings['playlistOnly']
   );  
   $form['playlist_settings']['displaySettings']['vertical'] = array(
     '#type' => 'select',
     '#title' => t('Playlist Orientation'),
     '#options' => array(false=>'Horizontal', true=>'Vertical'),
     '#description' => t('Selecting this will orient the playist either vertical or horizontal.  Note - This will only work if your template supports it.'),
     '#default_value' => $preset->settings['vertical']
   );    
          
   /**************************** NODE SETTINGS ***********************************/
   $form['node_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Node Settings'),
      '#weight' => -7,
      '#collapsible' => true,
      '#collapsed' => true 
   );   
   $form['node_settings']['node'] = array(
     '#type' => 'textfield',
     '#title' => t('Node Id'),
     '#description' => t('Enter the node Id if you would like to load a single node.'),
     '#default_value' => $preset->settings['node']
   );
   
   
   $form['control_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Controller Settings'),
      '#weight' => -6,
      '#collapsible' => true,
      '#collapsed' => true 
   );
   $form['control_settings']['showController'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show Controller'),
     '#description' => t('Unchecking this will hide the control bar.'),
     '#default_value' => $preset->settings['showController']
   );
   $form['control_settings']['controllerOnly'] = array(
     '#type' => 'checkbox',
     '#title' => t('Controller Only'),
     '#description' => t('Select if you would like to ONLY see the control bar.'),
     '#default_value' => $preset->settings['controllerOnly']
   );         
   
   $form['voter_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Voter Settings'),
      '#weight' => -5,
      '#collapsible' => true,
      '#collapsed' => true 
   );
   $form['voter_settings']['showNodeVoter'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show Node Voter'),
     '#description' => t('Select if you would like to see the node voter.'),
     '#default_value' => $preset->settings['showNodeVoter']
   );
   $form['voter_settings']['showTeaserVoter'] = array(
     '#type' => 'checkbox',
     '#title' => t('Show Teaser Voter'),
     '#description' => t('Select if you would like to see the teaser voter.'),
     '#default_value' => $preset->settings['showTeaserVoter']
   ); 
   
   $form['logo_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Logo Settings'),
      '#weight' => -4,
      '#collapsible' => true,
      '#collapsed' => true 
   ); 
   $form['logo_settings']['logo'] = array(
     '#type' => 'textfield',
     '#title' => t('Logo URL'),
     '#description' => t('Enter the relative location of your logo with respect to the Drupal root location.'),
     '#default_value' => $preset->settings['logo']
   );   
   $form['logo_settings']['link'] = array(
     '#type' => 'textfield',
     '#title' => t('Link URL'),
     '#description' => t('Enter the website that the logo points to.'),
     '#default_value' => $preset->settings['link']
   ); 
   $form['logo_settings']['logopos'] = array(
     '#type' => 'select',
     '#title' => t('Logo Position'),
     '#description' => t('Enter the location of your logo.'),
     '#options' => array(
      'ne' => t('Upper Right'),
      'se' => t('Lower Right'),
      'sw' => t('Lower Left'),
      'nw' => t('Upper Left')
     ),
     '#default_value' => $preset->settings['logopos']
   );   
   $form['logo_settings']['logoWidth'] = array(
     '#type' => 'textfield',
     '#title' => t('Logo Maximum Width'),
     '#description' => t('Enter the maximum width for this logo.'),
     '#default_value' => $preset->settings['logoWidth']
   );   
   $form['logo_settings']['logoHeight'] = array(
     '#type' => 'textfield',
     '#title' => t('Logo Maximum Height'),
     '#description' => t('Enter the maximum height for this logo.'),
     '#default_value' => $preset->settings['logoHeight']
   );    
   $form['logo_settings']['logox'] = array(
     '#type' => 'textfield',
     '#title' => t('Logo X-Offset'),
     '#description' => t('Enter the x-offset for this logo with respect to it\'s nearest side'),
     '#default_value' => $preset->settings['logox']
   );   
   $form['logo_settings']['logoy'] = array(
     '#type' => 'textfield',
     '#title' => t('Logo Y-Offset'),
     '#description' => t('Enter the y-offset for this logo with respect to it\'s nearest side'),
     '#default_value' => $preset->settings['logoy']
   );        
   
   $form['misc'] = array(
      '#type' => 'fieldset',
      '#title' => t('Other Settings'),
      '#weight' => -3,
      '#collapsible' => true,
      '#collapsed' => true 
   );     
   
   $form['misc']['debug'] = array(
     '#type' => 'checkbox',
     '#title' => t('Enable Player Debugging'),
     '#description' => t('Select if you would like to see the debug statements from the Media Player.'),
     '#default_value' => $preset->settings['debug']
   );    
   
   // If they have services module, then we need to get all the available API Keys.
   $hasServices = module_exists('services');
   $apiKeys = array();
   if( $hasServices ) {
      $result = db_query("SELECT * FROM {services_keys}");
      while($key = db_fetch_object( $result ) ) {
         $apiKeys[$key->kid] = $key->title;
      }
   }
   
   if( $hasServices ) {
      $form['misc']['apiKey'] = array(
        '#type' => 'select',
        '#title' => t('API Key'),
        '#description' => t('Select which API key you would like to use for this preset.'),
        '#default_value' => $preset->settings['apiKey'],
        '#options' => $apiKeys
      ); 
   }
   
   $form['misc']['protocol'] = array(
     '#type' => 'select',
     '#title' => t('Communication Protocol'),
     '#description' => t('Enter the communication protocol for this player to use.'),
     '#default_value' => $preset->settings['protocol'],
     '#options' => array(
        'auto' => 'Auto ( Uses both ajax and rpc )',
        'json' => 'Ajax ( JSON )',   
        'rpc' => 'Services ( requires the Services Module )'
     )
   ); 

   return $form;
}

function osmplayer_get_directories( $player_path ) {
   $directories = array();
   $base_directory = getcwd() . DIRECTORY_SEPARATOR;
   $base_directory .= drupal_get_path('module', 'osmplayer') . DIRECTORY_SEPARATOR;
   $base_directory .= $player_path;
   
   if (is_dir($base_directory) && $handle = opendir($base_directory)) {
      while (FALSE !== ($directory = readdir($handle))) {
         if ( (strpos($directory, '.') === FALSE) && is_dir( $base_directory . DIRECTORY_SEPARATOR . $directory ) ) {
            $directories[$directory] = $directory;
         }
      }

      closedir($handle);
   }  

   return $directories;
}

function osmplayer_get_themes() {
   return osmplayer_get_directories('player' . DIRECTORY_SEPARATOR . 'jquery-ui' . DIRECTORY_SEPARATOR . 'css');
}

function osmplayer_get_templates() {
   return osmplayer_get_directories('player' . DIRECTORY_SEPARATOR . 'templates');
}

function osmplayer_get_skins() {
   return osmplayer_get_directories('player' . DIRECTORY_SEPARATOR . 'flash' . DIRECTORY_SEPARATOR . 'skins');
}

/**
 * Helper function to add all the osmplayer javascript files.
 */
function osmplayer_add_js( $player ) {
   // Cache the player path.
   $osmpath = drupal_get_path('module', 'osmplayer');
   $playerpath = $osmpath . '/player';	
	
   // Add the javascript files.
   $js_files = $player->getJSFiles();
   foreach( $js_files as $js_file ) {
      drupal_add_js( $playerpath . '/' . $js_file);  
   }

   // Add the JavaScript for this player.
   drupal_add_js( $player->getPlayerJS(), 'inline');	
}

/**
 * Helper function to add all the osmplayer CSS files.
 */
function osmplayer_add_css( $player, $preset ) {
	static $cssadded; 
	if( !$cssadded[$preset] ) {
		$cssadded[$preset] = TRUE;
   
		// Set the CSS directory of our OSMPlayer component, and then add the CSS files to the page..
	   $files_dir = file_directory_path();
	   $css_path = $files_dir . '/css/osmplayer';
	   $css_dir = $files_dir . DIRECTORY_SEPARATOR . 'css' . DIRECTORY_SEPARATOR . 'osmplayer';
	   $player->setCSSDirectory( getcwd() . DIRECTORY_SEPARATOR . $css_dir );   
	   $css_files = $player->getCSSFiles();
	   drupal_add_css( ($css_dir . '/' . $css_files[0]) );
	   drupal_set_html_head('<!--[if IE]><link rel="stylesheet" type="text/css" href="' . ($css_path . '/' . $css_files[1]) . '" /><![endif]-->');
	}
}

/**
 * The template preprocess function for the osm media player.
 * 
 * @param $variables - The 
 * @return unknown_type
 */
function template_preprocess_osmplayer(&$variables) {
   global $base_url, $user;  
   
   // Let the mediafront populate all the variables for us.
   mediafront_template_preprocess( $variables );
   
   // Setup our parameters.
   $params = $variables['params'];
   $variables['params']['id'] = $params['id'] = 'mediafront_' . $params['preset'];
   $params['baseURL'] = $base_url;
   $params['gateway'] = $base_url . '/services/xmlrpc';

   // Get the media player.
   $player = new OSMPlayer( $params );
   
   // Set the session id for the player.
   $player->setSessionId( $user->sid );      

   // Now add our playlist connections.
   if( isset($variables['params']['connect']) && $variables['params']['connect']['isplaylist'] ) {
      foreach( $variables['params']['connect']['isplaylist'] as $toPlayer ) {
         $player->addPlaylistTo( $toPlayer );
      }
   }
   
   // Now add our controller connections.   
   if( isset($variables['params']['connect']) && $variables['params']['connect']['iscontroller'] ) {
      foreach( $variables['params']['connect']['iscontroller'] as $toPlayer ) {
         $player->addControllerTo( $toPlayer );
      }
   }

   // Add the javascript for this player.
   osmplayer_add_js( $player );

   // Add the CSS files for this player.
   osmplayer_add_css( $player, $params['preset'] );
  
   // Make sure they always have a template, theme, and version...
   $template = $variables['params']['template'] = $player->getTemplate();
   $variables['params']['theme'] = $player->getTheme();
   $variables['params']['version'] = $player->getVersion();
   
   // Now set up the prefix for the template.
   $variables['params']['prefix'] = $player->getId() . '_';

   // Store the player path as a variable.
   $variables['params']['playerurl'] = $base_url . '/' . drupal_get_path('module', 'osmplayer') . '/player';
   
   // Now set up our templates within a template.
   $variables['titlebar'] = theme( 'osmplayer_' . $template . '_titlebar', $variables['params'] );  
   $variables['menu'] = theme( 'osmplayer_' . $template . '_menu', $variables['params'] );     
   $variables['node'] = theme( 'osmplayer_' . $template . '_node', $variables['params'] );
   $variables['playlist'] = theme( 'osmplayer_' . $template . '_playlist', $variables['params'] );
}

/**
 * The template preprocess function for the node.
 * 
 * @param $variables - The 
 * @return unknown_type
 */
function template_preprocess_osmplayer_node(&$variables) {
   $variables['controlBar'] = theme( 'osmplayer_' . $variables['params']['template'] . '_controlbar', $variables['params'] );
}

/**
 * The template preprocess function for the node.
 * 
 * @param $variables - The 
 * @return unknown_type
 */
function template_preprocess_osmplayer_controlbar(&$variables) {
   $variables['voter'] = theme( 'osmplayer_' . $variables['params']['template'] . '_nodevoter', $variables['params'] );
}


/**
 * The template preprocess function for the node.
 * 
 * @param $variables - The 
 * @return unknown_type
 */
function template_preprocess_osmplayer_teaser(&$variables) {
   $variables['teaservoter'] = theme( 'osmplayer_' . $variables['params']['template'] . '_teaservoter', $variables['params'] );
}

/**
 * The template preprocess function for the node.
 * 
 * @param $variables - The 
 * @return unknown_type
 */
function template_preprocess_osmplayer_playlist(&$variables) {
   $variables['teaser'] = theme( 'osmplayer_' . $variables['params']['template'] . '_teaser', $variables['params'] );
   
   if( $variables['params']['vertical'] ) {
      $variables['scrollBar'] = theme( 'osmplayer_' . $variables['params']['template'] . '_scrollbar', $variables['params'] );
   }
   else {
      $variables['scrollBar'] = theme( 'osmplayer_' . $variables['params']['template'] . '_hscrollbar', $variables['params'] );
   }
   
   $variables['links'] = $variables['params']['links'] ? theme( 'osmplayer_' . $variables['params']['template'] . '_links', $variables['params'] ) : '';  
   $variables['pager'] = theme( 'osmplayer_' . $variables['params']['template'] . '_pager', $variables['params'] );
}
